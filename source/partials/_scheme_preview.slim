ruby:
    colors = ksf(ksf)
    common = colors.color(['CommonStyles', 'default_fixed', 'fore'])
    keywords = colors.color_for('keywords', 'Ruby')
    class_vars = colors.color_for('class variables', 'Ruby')
    instance_vars = colors.color_for('instance variables', 'Ruby')
    classes = colors.color_for('classes', 'Ruby')
    strings = colors.color_for('strings', 'Ruby')
    functions = colors.color_for('functions', 'Ruby')
    keywords2 = colors.color_for('keywords2', 'Ruby')
    comments = colors.color_for('comments', 'Ruby')
    operators = colors.color_for('operators', 'Ruby')
    numbers = colors.color_for('numbers', 'Ruby')
    identifiers = colors.color_for('identifiers', 'Ruby')
    symbols = colors.color_for('symbols', 'Ruby')
    regex = colors.color_for('regex', 'Ruby')
    hdocs = colors.color_for('here documents', 'Ruby')
- if colors.ready
    style type="text/css"
        |
            pre
            {
                background: #{colors.color(['CommonStyles', 'default_fixed', 'back'])}!important;
                color: #{common}!important;
            }
            .ruby .k { color: #{keywords}!important }
            .ruby .kn { color: #{keywords}!important }
            .ruby .n { color: #{identifiers}!important }
            .ruby .kp { color: #{identifiers}!important }
            .ruby .nn { color: #{identifiers}!important }
            .ruby .nb { color: #{identifiers}!important }
            .ruby .bp { color: #{keywords2}!important }
            .ruby .s { color: #{strings}!important }
            .ruby .s1 { color: #{strings}!important }
            .ruby .s2 { color: #{strings}!important }
            .ruby .sb { color: #{strings}!important }
            .ruby .sx { color: #{strings}!important }
            .ruby .sr { color: #{regex}!important }
            .ruby .nc { color: #{classes}!important }
            .ruby .nf { color: #{functions}!important }
            .ruby .c { color: #{comments}!important }
            .ruby .cm { color: #{comments}!important }
            .ruby .o { color: #{operators}!important }
            .ruby .mi { color: #{numbers}!important }
            .ruby .vc { color: #{class_vars}!important }
            .ruby .ss { color: #{symbols}!important }
            .ruby .vi { color: #{instance_vars}!important }
            .ruby .no { color: #{hdocs}!important }
            .ruby .sh { color: #{hdocs}!important }
    = code 'ruby' do
        |
            # Fruit salad recipe
            # Let's build a fruit-salad maker
            # This snippet just shows various parts of Ruby speech.
                
            module Salad
              class Fruit
                @@class_var = 0
                attr :symbol
                def initialize(fruit_list, counts)
                  @instance_var = {}
                  fruit_list.zip(counts).each { |a, b| @instance_var[a] = b } # block code
                end
                def mix()
                  print "double-quoted string"
                  print 'single-quoted string'
                  print `command`
                  print %Q(Q string)
                  print %q(q string)
                  print %r(reg ex)
                  print %x(backquoted string)
                  regex = /pattern/isx
                  @@class_var += 1
                end
              end
            end
            
            fruit_list = %w(guava rambutan longan mangosteen)
            counts = [3, 4, 1, 5]
            fruits = Salad::Fruit.new(fruit_list, counts)
            
            print <<abc
            here document
            abc
            
            =begin
            rubydoc
            block comment
            =end
            
            __END__
            end section

